"""
Telegraph Uploader Bot

This module defines a Telegram bot that can upload photos to Telegra.ph and 
create instant view links for text messages.
The bot is built using the Pyrogram library and the Telegraph API.

Features:
- Upload photos to Telegra.ph and return the URL.
- Create Telegra.ph posts from text messages, with support for custom titles and emoji removal.

Classes:
- Bot: A subclass of Pyrogram's Client, representing the Telegram bot.

Functions:
- start_handlers: Handles the /start command to provide a welcome message.
- photo_handler: Handles incoming photo messages, uploads them to Telegra.ph,
                 and sends the URL to the user.
- text_handler: Handles incoming text messages, creates Telegra.ph posts, 
                and sends the URL to the user.

Patterns:
- EMOJI_PATTERN: Regular expression to match <emoji> tags in the text.
- TITLE_PATTERN: Regular expression to match title lines in the text.

Usage:
1. Send a /start command to receive a welcome message.
2. Send a photo to upload it to Telegra.ph and get the link.
3. Send a text message in the format 
        Title: {title}
        {content}
    to create a Telegra.ph post.
"""

import os
import re
import time
import logging
import logging.config
import asyncio
import uvicorn
from fastapi import FastAPI
from telegraph import upload_file, Telegraph
from pyrogram import Client, filters
from pyrogram.types import Message
from config import Config
from utils import progress

try:
    import uvloop  # https://docs.pyrogram.org/topics/speedups#uvloop
    uvloop.install()
except ImportError:
    pass

# Get logging configurations
logging.config.fileConfig("logging.conf")
logging.getLogger().setLevel(logging.ERROR)
logging.getLogger("pyrogram").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# FastAPI app for health check
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "healthy"}

class Bot(Client):  # pylint: disable=too-many-ancestors
    """Telegram bot client for uploading photos and creating posts on Telegra.ph."""
    def __init__(self):
        """Initializes the bot with the provided configuration."""
        super().__init__(
            "telegraph",
            bot_token=Config.BOT_TOKEN,
            api_id=Config.API_ID,
            api_hash=Config.API_HASH,
        )

    async def start(self):
        """Starts the bot and prints the bot username."""
        await super().start()
        print(f"Bot Started at @{self.me.username}")

    async def stop(self, *args, **kwargs):
        """Stops the bot and prints a stop message."""
        await super().stop(*args, **kwargs)
        print("Session Stopped...")

bot = Bot()
EMOJI_PATTERN = re.compile(r'<emoji id="\d+">')
TITLE_PATTERN = re.compile(r"^title:?\s*(.*)", re.IGNORECASE | re.MULTILINE)

@bot.on_message(filters.command("start") & filters.incoming & filters.private)
async def start_handlers(_: Bot, message: Message) -> None:
    """Handles the /start command to provide a welcome message to the user."""
    await message.reply(
        " ú·¥á ü ü·¥è **·¥Ö·¥á·¥Ä Ä!**\n\n"
        "üëã **·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥õ·¥á ü·¥á…¢ Ä·¥Ä.·¥ò ú ·¥ú·¥™ ü·¥è·¥Ä·¥Ö·¥á Ä  ô·¥è·¥õ!**\n\n"
        "·¥°…™·¥õ ú ·¥õ ú…™Íú±  ô·¥è·¥õ,  è·¥è·¥ú ·¥Ñ·¥Ä…¥:\n"
        " ‚Ä¢ **·¥ú·¥ò ü·¥è·¥Ä·¥Ö ·¥ò ú·¥è·¥õ·¥èÍú±**: Íú±·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä ·¥ò ú·¥è·¥õ·¥è, ·¥Ä…¥·¥Ö "
        "…™' ü ü ·¥ú·¥™ ü·¥è·¥Ä·¥Ö …™·¥õ ·¥õ·¥è ·¥õ·¥á ü·¥á…¢ Ä·¥Ä.·¥ò ú, ·¥ò Ä·¥è·¥†…™·¥Ö…™…¥…¢  è·¥è·¥ú ·¥°…™·¥õ ú ·¥Ä  ü…™…¥·¥ã.\n"
        " ‚Ä¢ **·¥Ñ Ä·¥á·¥Ä·¥õ·¥á …™…¥Íú±·¥õ·¥Ä…¥·¥õ ·¥†…™·¥á·¥°  ü…™…¥·¥ãÍú±**: Íú±·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä ·¥õ·¥áx·¥õ, ·¥Ä…¥·¥Ö "
        "…™' ü ü ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥ÄÔøΩ…¥ …™…¥Íú±·¥õ·¥Ä…¥·¥õ ·¥†…™·¥á·¥°  ü…™…¥·¥ã Íú∞·¥è Ä …™·¥õ.\n\n"
        "üìå **·¥úÍú±·¥Ä…¢·¥á**:\n"
        "‚Ä¢ Íú±·¥á…¥·¥Ö ·¥Ä ·¥ò ú·¥è·¥õ·¥è ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è ·¥õ·¥è ·¥ú·¥™ ü·¥è·¥Ä·¥Ö …™·¥õ.\n"
        "‚Ä¢ Íú±·¥á…¥·¥Ö ·¥Ä ·¥õ·¥áx·¥õ ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™…¥ ·¥õ ú·¥á Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥ç·¥á…¥·¥õ…™·¥è…¥·¥á·¥Ö  ô·¥á ü·¥è·¥° "
        "·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä.·¥™ ú ·¥™·¥èÍú±·¥õ.\n\n"
        "üîó **·¥Ä ô·¥è·¥ú·¥õ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä.·¥™ ú**:\n"
        "·¥õ·¥á ü·¥á…¢ Ä·¥Ä.·¥™ ú …™Íú± ·¥Ä ·¥ç…™…¥…™·¥ç·¥Ä ü…™Íú±·¥õ ·¥™·¥ú ô ü…™Íú± ú…™…¥…¢ ·¥õ·¥è·¥è ü ·¥õ ú·¥Ä·¥õ ·¥Ä ü ü·¥è·¥°Íú± "
        " è·¥è·¥ú ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á  Ä…™·¥Ñ ú ü è Íú∞·¥è Ä·¥ç·¥Ä·¥õ·¥õ·¥á·¥Ö ·¥™·¥èÍú±·¥õÍú± ·¥°…™·¥õ ú ·¥™ ú·¥è·¥õ·¥èÍú±, ·¥†…™·¥Ö·¥á·¥èÍú±, ·¥Ä…¥·¥Ö "
        "·¥Ä ü ü Íú±·¥è Ä·¥õÍú± ·¥èÍú∞ ·¥á·¥ç ô·¥á·¥Ö·¥Ö·¥á·¥Ö ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ.\n\n"
        "üåü **…¢·¥á·¥õ Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö**: ·¥ä·¥úÍú±·¥õ Íú±·¥á…¥·¥Ö ·¥Ä ·¥™ ú·¥è·¥õ·¥è ·¥è Ä ·¥õ·¥áx·¥õ ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á, ·¥Ä…¥·¥Ö  ü·¥á·¥õ ·¥ç·¥á ·¥Ö·¥è ·¥õ ú·¥á  Ä·¥áÍú±·¥õ!\n\n"
        "üõ† **Íú±·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á**: "
        "[Íú∞·¥è Ä·¥ã ·¥è…¥ …¢…™·¥õ ú·¥ú ô](https://github.com/Ns-AnoNymouS/Telegraph-Uploader)\n\n"
        "üìù **·¥Ñ·¥úÍú±·¥õ·¥è·¥ç ·¥õ…™·¥õ ü·¥á**:\n"
        "```txt\n"
        "·¥õ…™·¥õ ü·¥á: {title}\n{content}```\n\n"
        "üìù **·¥áx·¥Ä·¥ç·¥™ ü·¥á**:\n"
        "```txt\n"
        "·¥õ…™·¥õ ü·¥á: ·¥ç è Íú∞…™ ÄÍú±·¥õ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥™ ú ·¥™·¥èÍú±·¥õ\n"
        "·¥õ ú…™Íú± …™Íú± ·¥õ ú·¥á ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ ·¥èÍú∞ ·¥ç è Íú∞…™ ÄÍú±·¥õ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥™ ú ·¥™·¥èÍú±·¥õ!\n"
        "…™'·¥ç ·¥úÍú±…™…¥…¢ ·¥õ ú·¥á ·¥õ·¥á ü·¥á…¢ Ä·¥Ä.·¥™ ú ·¥ú·¥™ ü·¥è·¥Ä·¥Ö·¥á Ä  ô·¥è·¥õ ·¥õ·¥è ·¥™·¥ú ô ü…™Íú± ú ·¥õ ú…™Íú±.\n\n"
        " ú·¥á Ä·¥á'Íú± ·¥Ä  ü…™Íú±·¥õ ·¥èÍú∞ ·¥° ú·¥Ä·¥õ …™  ü…™·¥ã·¥á:\n"
        "- ·¥™ Ä·¥è…¢ Ä·¥Ä·¥ç·¥ç…™…¥…¢ üíª\n"
        "-  Ä·¥á·¥Ä·¥Ö…™…¥…¢ üìö\n"
        "- ·¥õ Ä·¥Ä·¥†·¥á ü…™…¥…¢ ‚úàÔ∏è\n"
        "- ·¥ç·¥úÍú±…™·¥Ñ üéµ\n\n"
        " è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á  è·¥è·¥ú Ä ·¥è·¥°…¥ ·¥™·¥èÍú±·¥õÍú± ·¥õ·¥è·¥è. ·¥ä·¥úÍú±·¥õ Íú∞·¥è ü ü·¥è·¥° ·¥õ ú·¥á Íú∞·¥è Ä·¥Æ·¥Ä·¥õ ·¥Ä…¥·¥Ö ·¥á…¥·¥ä·¥è è!"
        "```\n",
        disable_web_page_preview=True,
        quote=True,
    )

@bot.on_message(filters.photo & filters.incoming & filters.private)
async def photo_handler(_: Bot, message: Message) -> None:
    """
    Handles incoming photo messages by uploading the photo to Telegra.ph
    and sending the link to the user.
    """
    try:
        msg = await message.reply_text("·¥™ Ä·¥è·¥Ñ·¥áÍú±Íú±…™…¥…¢...‚è≥", quote=True)
        location = f"./{message.from_user.id}{time.time()}/"
        os.makedirs(location, exist_ok=True)
        start_time = time.time()
        file = await message.download(
            location, progress=progress, progress_args=(msg, start_time)
        )
        media_upload = upload_file(file)
        telegraph_link = f"https://telegra.ph{media_upload[0]}"
        await msg.edit(telegraph_link)
        os.remove(file)
        os.rmdir(location)
    except FileNotFoundError:
        pass
    except Exception as e:  # pylint: disable=broad-exception-caught
        logger.error(e)
        await msg.edit(f"**·¥á Ä Ä·¥è Ä:**\n{e}")

@bot.on_message(filters.text & filters.incoming & filters.private)
async def text_handler(_: Bot, message: Message) -> None:
    """
    Handles incoming text messages
    by creating a Telegra.ph post
    and sending the link to the user.
    """
    try:
        msg = await message.reply_text("·¥™ Ä·¥è·¥Ñ·¥áÍú±Íú±…™…¥…¢...‚è≥", quote=True)
        short_name = "Ns Bots"
        user = Telegraph().create_account(short_name=short_name)
        access_token = user["access_token"]
        content = message.text
        content = re.sub(EMOJI_PATTERN, "", content).replace("</emoji>", "")
        match = re.search(TITLE_PATTERN, content)
        if match:
            title = match.group(1).strip()
            content = re.sub(TITLE_PATTERN, "", content, count=1).strip()
        else:
            title = message.from_user.first_name
        content = content.replace("\n", "<br>")
        author_url = (
            f"https://telegram.dog/{message.from_user.username}"
            if message.from_user.username
            else None
        )
        response = Telegraph(access_token=access_token).create_page(
            title=title,
            html_content=content,
            author_name=str(message.from_user.first_name),
            author_url=author_url,
        )
        path = response["path"]
        await msg.edit(f"https://telegra.ph/{path}")
    except ValueError as e:
        logger.error(e)
        await msg.edit("·¥ú…¥·¥Ä ô ü·¥á ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á …™…¥Íú±·¥õ·¥Ä…¥·¥õ ·¥†…™·¥á·¥°  ü…™…¥·¥ã.")
    except Exception as e:  # pylint: disable=broad-exception-caught
        logger.error(e)
        await msg.edit(f"**·¥á Ä Ä·¥è Ä:**\n{e}")

async def main():
    # Start the Telegram bot
    await bot.start()
    # Start the web server
    config = uvicorn.Config(app=app, host="0.0.0.0", port=8080)
    server = uvicorn.Server(config)
    await server.serve()

if __name__ == "__main__":
    asyncio.run(main())
